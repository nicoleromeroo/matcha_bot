Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"ce48eef7-9330-4c48-991d-220a9e6b87b6\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/.env\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/matcha_bot2.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/matcha_bot3.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/save_cookies.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/NotifyBot.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/NotifyBot.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/matcha_bot.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/matcha_bot.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;nicoleromeroo&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/nicoleromeroo/matcha_bot.git&quot;,\r\n    &quot;accountId&quot;: &quot;8b188f1f-1c90-4f95-96c9-356b0c36923b&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 7\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2vcdhw5LRDTnr2nq4bnkj7edLz3\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.matcha_bot3.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/nicol/PycharmProjects/NotifyBot&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-1632447f56bf-JavaScript-PY-243.26053.29\" />\r\n        <option value=\"bundled-python-sdk-b1dbf8ef85a6-4df51de95216-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-243.26053.29\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"ce48eef7-9330-4c48-991d-220a9e6b87b6\" name=\"Changes\" comment=\"\" />\r\n      <created>1744448419816</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1744448419816</updated>\r\n      <workItem from=\"1744448420571\" duration=\"16000\" />\r\n      <workItem from=\"1746444609403\" duration=\"678000\" />\r\n      <workItem from=\"1747403480000\" duration=\"607000\" />\r\n      <workItem from=\"1748338740017\" duration=\"2000\" />\r\n      <workItem from=\"1748953615107\" duration=\"2493000\" />\r\n      <workItem from=\"1750844178950\" duration=\"2102000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/NotifyBot$matcha_bot3.coverage\" NAME=\"matcha_bot3 Coverage Results\" MODIFIED=\"1750844187543\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 3e7ee38faa027dc0acdbe0484b3dfdd3f07b67cd)
+++ b/.idea/workspace.xml	(date 1751371109751)
@@ -4,14 +4,11 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="ce48eef7-9330-4c48-991d-220a9e6b87b6" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/.env" afterDir="false" />
+    <list default="true" id="ce48eef7-9330-4c48-991d-220a9e6b87b6" name="Changes" comment="final matcha bot">
       <change afterPath="$PROJECT_DIR$/matcha_bot2.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/matcha_bot3.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/save_cookies.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/NotifyBot.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/NotifyBot.iml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/matcha_bot.py" beforeDir="false" afterPath="$PROJECT_DIR$/matcha_bot.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/matcha_bot3.py" beforeDir="false" afterPath="$PROJECT_DIR$/matcha_bot3.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -80,13 +77,27 @@
       <workItem from="1748338740017" duration="2000" />
       <workItem from="1748953615107" duration="2493000" />
       <workItem from="1750844178950" duration="2102000" />
+      <workItem from="1751369407081" duration="1426000" />
+    </task>
+    <task id="LOCAL-00001" summary="final matcha bot">
+      <option name="closed" value="true" />
+      <created>1751370461922</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1751370461922</updated>
     </task>
+    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
   </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="final matcha bot" />
+    <option name="LAST_COMMIT_MESSAGE" value="final matcha bot" />
+  </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/NotifyBot$matcha_bot3.coverage" NAME="matcha_bot3 Coverage Results" MODIFIED="1750844187543" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/NotifyBot$matcha_bot3.coverage" NAME="matcha_bot3 Coverage Results" MODIFIED="1751369421801" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
Index: matcha_bot2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/matcha_bot2.py b/matcha_bot2.py
new file mode 100644
--- /dev/null	(date 1744573917283)
+++ b/matcha_bot2.py	(date 1744573917283)
@@ -0,0 +1,190 @@
+import os
+import time
+import requests
+import json
+from playwright.sync_api import sync_playwright
+from dotenv import load_dotenv
+
+load_dotenv()
+
+WEBSITE_URL = "https://www.marukyu-koyamaen.co.jp/english/shop/products/catalog/matcha/greentea?currency=EUR"
+CHECK_INTERVAL = 300  # 5 minutes
+DISCORD_WEBHOOK = os.getenv("DISCORD_WEBHOOK")
+USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
+
+
+def get_product_links():
+    """Get all product links from the catalog page"""
+    with sync_playwright() as p:
+        browser = p.chromium.launch(headless=False)
+        context = browser.new_context(user_agent=USER_AGENT)
+        page = context.new_page()
+
+        try:
+            page.goto(WEBSITE_URL, timeout=120000)
+            page.wait_for_selector("li.product", timeout=30000)
+
+            # Get all product links
+            product_links = page.eval_on_selector_all(
+                "li.product a.woocommerce-loop-product__link",
+                "elements => elements.map(el => el.href)"
+            )
+
+            return list(set(product_links))  # Remove duplicates
+
+        except Exception as e:
+            print(f"Error getting product links: {e}")
+            return []
+        finally:
+            browser.close()
+
+
+def check_product_page(url):
+    """Check individual product page for stock status"""
+    with sync_playwright() as p:
+        browser = p.chromium.launch(headless=False)
+        context = browser.new_context(user_agent=USER_AGENT)
+        page = context.new_page()
+
+        try:
+            page.goto(url, timeout=60000)
+
+            # Handle cookie consent if needed
+            try:
+                page.click('text=Accept All', timeout=5000)
+            except Exception:
+                pass
+
+            # Wait for product page to load
+            page.wait_for_selector('.product_title', timeout=30000)
+
+            # Get product name
+            product_name = page.inner_text('.product_title').strip()
+
+            # Check all variants
+            variants = []
+            variant_elements = page.query_selector_all('.variations_form .variations tr')
+
+            for variant in variant_elements:
+                label = variant.query_selector('th label').inner_text().strip()
+                options = variant.query_selector_all('td select option')
+                for option in options[1:]:  # Skip first default option
+                    variant_name = option.inner_text().strip()
+                    variants.append(f"{label}: {variant_name}")
+
+            # Check stock status for each variant
+            stock_info = []
+            add_to_cart_button = page.query_selector('button.single_add_to_cart_button')
+
+            if add_to_cart_button:
+                is_disabled = add_to_cart_button.get_attribute('disabled') is not None
+                status = "🟢 IN STOCK" if not is_disabled else "🔴 OUT OF STOCK"
+
+                # Get price information
+                price_element = page.query_selector('.price .woocommerce-Price-amount')
+                price = price_element.inner_text().strip() if price_element else "N/A"
+
+                stock_info.append({
+                    "variant": "Default",
+                    "status": status,
+                    "price": price
+                })
+
+            # If no variants found, check simple stock status
+            if not variants and not stock_info:
+                stock_status = page.query_selector('.stock')
+                status = "🟢 IN STOCK" if stock_status and "in stock" in stock_status.inner_text().lower() else "🔴 OUT OF STOCK"
+
+                price_element = page.query_selector('.price .woocommerce-Price-amount')
+                price = price_element.inner_text().strip() if price_element else "N/A"
+
+                stock_info.append({
+                    "variant": "Default",
+                    "status": status,
+                    "price": price
+                })
+
+            return {
+                "name": product_name,
+                "variants": variants,
+                "stock_info": stock_info,
+                "link": url
+            }
+
+        except Exception as e:
+            print(f"Error checking {url}: {e}")
+            return {
+                "name": "Unknown Product",
+                "variants": [],
+                "stock_info": [{"variant": "Error", "status": "❔ ERROR", "price": "N/A"}],
+                "link": url
+            }
+        finally:
+            browser.close()
+
+
+def monitor_products():
+    print("✅ Stock monitor started")
+    while True:
+        print(f"\n⏳ Checking stock at {time.strftime('%Y-%m-%d %H:%M:%S')}")
+
+        try:
+            products = []
+            product_links = get_product_links()
+
+            for link in product_links:
+                print(f"Checking {link}")
+                result = check_product_page(link)
+                products.append(result)
+                time.sleep(2)
+
+            send_discord_report(products)
+            print(f"📩 Reported {len(products)} products")
+
+            time.sleep(CHECK_INTERVAL)
+
+        except Exception as e:
+            print(f"❌ Error: {e}")
+            time.sleep(60)
+
+
+def send_discord_report(products):
+    if not products:
+        return
+
+    current_time = time.strftime("%Y-%m-%d %H:%M:%S")
+    in_stock_count = sum(1 for p in products for s in p['stock_info'] if "🟢" in s['status'])
+
+    embeds = []
+    for product in products:
+        fields = []
+        for stock in product['stock_info']:
+            fields.append({
+                "name": f"{stock['status']} {product['name']} ({stock['variant']})",
+                "value": f"**Price:** {stock['price']}\n[View Product]({product['link']})",
+                "inline": False
+            })
+
+        embeds.append({
+            "title": f"🍵 {product['name']}",
+            "color": 0x00FF00 if any("🟢" in s['status'] for s in product['stock_info']) else 0xFF0000,
+            "fields": fields,
+            "footer": {"text": f"Last updated: {current_time}"}
+        })
+
+    try:
+        response = requests.post(
+            DISCORD_WEBHOOK,
+            json={
+                "content": f"**Stock Update ({in_stock_count} items In Stock)**",
+                "embeds": embeds
+            },
+            headers={"Content-Type": "application/json"}
+        )
+        response.raise_for_status()
+    except requests.RequestException as e:
+        print(f"Discord error: {e}")
+
+
+if __name__ == "__main__":
+    monitor_products()
\ No newline at end of file
